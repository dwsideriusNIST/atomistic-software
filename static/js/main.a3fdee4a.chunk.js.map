{"version":3,"sources":["reportWebVitals.js","components/Config.js","components/Table.js","components/Columns.js","components/Chart/chart.js","components/Chart/single.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","yearToRange","year","toString","YEARS","citation","citations","push","parseInt","split","Set","sort","CODES","codename","codes","getData","range_key","citations_data","data","dataArray","getDataChart","lines","slice","codeName","getCodeCitations","console","log","line_data","isNaN","Table","props","state","columns","options","event","this","setState","target","value","className","title","defaultValue","onChange","handleYearChange","map","x","dataIndex","row","href","rel","Tooltip","licenses","placement","Button","methods","searchUrl","encodeURIComponent","React","Component","Chart","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","SingleChart","decodeURIComponent","useParams","ratio","annualGrowth","Math","pow","length","id","toFixed","enableCrosshair","animate","ReactDOM","render","StrictMode","basename","exact","path","component","Typography","document","getElementById"],"mappings":"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","file":"static/js/main.a3fdee4a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import citations from '../data/citations.json'\nimport codes from '../data/codes.json'\n\nfunction yearToRange(year) {\n  return year.toString() + '-' + year.toString();\n}\n\nfunction rangeToYear(range) {\n  return parseInt(range.split('-')[0]);\n}\n\n// For whatever reason, one cannot simply use `citations.keys()`\nlet YEARS = [];\nfor (const citation in citations){\n  YEARS.push(rangeToYear(citation));\n}\nYEARS = [...new Set(YEARS)];\nYEARS.sort();\n\n\nlet CODES = [];\nfor (const codename in codes){\n    CODES.push(codename);\n}\n\nfunction getData(year) {\n  let range_key = yearToRange(year);\n  let citations_data = citations[range_key]['citations'];\n  let data = codes; //.slice();\n\n  for (const codename in data) {\n    data[codename]['citations'] = citations_data[codename]['citations'];\n  }\n\n  let dataArray = [];\n  for (const codename in data) {\n    dataArray.push(data[codename]);\n  }\n  return dataArray;\n}\n\nfunction getDataChart(){\n    let lines = [];\n    for(const codeName of CODES.slice(0,50)){\n        lines.push({ 'id': codeName, 'data': getCodeCitations(codeName)});\n    }\n    return lines;\n}\n\nfunction  getCodeCitations(codeName){\n  console.log(codeName);\n  let line_data = [];\n    for (const year of YEARS) {\n        let data = {};\n        let range_key = yearToRange(year);\n\n        data['x'] = parseInt(year);\n        data['y'] = parseInt(citations[range_key]['citations'][codeName]['citations']);\n        if (isNaN(data['y']) || data['y'] <= 0) { \n            data['y']=0.1;\n        }\n        line_data.push(data);\n    \n    }\n    return line_data;\n}\n\nexport {yearToRange, rangeToYear, YEARS, getData, getDataChart, getCodeCitations};","/**\n * Overview table with all codes.\n */\nimport React from 'react';\nimport MUIDataTable from \"mui-datatables\";\n//import RangeSlider from './RangeSlider'\n\n\nimport { YEARS, getData } from './Config';\nimport { getColumns } from './Columns';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: \"2020\",\n      data: getData(\"2020\"),\n      columns: null,\n      options: {\n        'filterType': 'checkbox',\n        'sortOrder': { 'name': 'citations', 'direction': 'desc' },\n        'rowsPerPage': 100,\n      }\n    };\n  }\n\n  handleYearChange(event) {\n    this.setState({ year: event.target.value, data: getData(event.target.value) });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MUIDataTable\n            title={\n              <h2>Atomistic Simulation Engines &nbsp;\n              <select defaultValue={this.state.year} onChange={(event) => this.handleYearChange(event)}>\n                  {YEARS.map(x => <option key={x}>{x}</option>)}\n                </select>\n              </h2>\n            }\n            columns={getColumns(this.state.data, this.state.year)}\n            data={this.state.data}\n            options={this.state.options}\n          />\n        </header>\n      </div>\n    );\n    //title={<RangeSlider year={this.state.year} />\n  }\n}\n\nexport default Table;\n","/**\n * Column definition for table\n */\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport methods from '../data/methods';\nimport licenses from '../data/licenses';\n//idea: use search icon for link to google scholar\nimport SearchIcon from '@material-ui/icons/Search';\n\nfunction getColumns(data, year) {\n    /**\n     * Prepare columns.\n     * \n     * Since 'customBodyRenderLite' function requires us to fetch the data ourselves, this getColumns function\n     * relies on data to already be present (which is rather bad design).\n     */\n    let columns = [\n        {\n            \"name\": \"name\",\n            \"label\": \"Code\",\n            \"options\": {\n                \"filter\": false, \"sort\": true,\n                // add homepage link to code\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    return <a href={row['homepage']} target='_blank' rel=\"noreferrer\">{row['name']}</a>;\n                }\n            }\n        },\n        {\n            \"name\": \"author_name\",\n            \"label\": \"Authors\",\n            \"options\": { \"filter\": false, \"sort\": true }\n        },\n        {\n            \"name\": \"description\",\n            \"label\": \"Notes\",\n            \"options\": { \"filter\": false, \"sort\": true }\n        },\n        {\n            \"name\": \"license\",\n            \"label\": \"License\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const x = data[dataIndex]['license'];\n                    return <Tooltip title={licenses[x]} placement=\"top-end\" key={x}><Button>{x}</Button></Tooltip>;\n                }\n            }\n        },\n\n        {\n            \"name\": \"types\",\n            \"label\": \"Methods\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const types = data[dataIndex]['types'];\n                    return types.map(x => <Tooltip title={methods[x]} placement=\"top-end\" key={x}><Button>{x}</Button></Tooltip>);\n                }\n            }\n        },\n        {\n            \"name\": \"citations\",\n            \"label\": \"Citations\",\n            \"options\": {\n                \"filter\": false,\n                \"sort\": true,\n                // add google scholar link to number of citations\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    const searchUrl = 'https://scholar.google.com/scholar?q=' + encodeURIComponent(row['query_string'])\n                        + '&hl=en&as_sdt=0%2C5&as_ylo=' + year + '&as_yhi=' + year;\n                    return (<a href={searchUrl} target='_blank' rel=\"noreferrer\">{row['citations']}</a>);\n                }\n            }\n        },\n        {\n            \"name\": \"trend\",\n            \"label\": \"Trend\",\n            \"options\": {\n                \"filter\": false,\n                \"sort\": true,\n                // add google scholar link to number of citations\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    return <Button href={'#/charts/' + encodeURIComponent(row['name'])} ><SearchIcon/> </Button>;\n                }\n            }\n        }\n    ]\n\n    return columns;\n}\n\nexport { getColumns }","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\n//import config from './config'\nimport './chart.css'\nimport {getDataChart} from '../Config'\n\nclass Chart extends React.Component {\n\n    render() {\n        return (\n            <div className=\"chart\">\n                <ResponsiveLine\n        data={getDataChart()}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{ type: 'point' }}\n        yScale={{ type: 'log', min: 100, max: 'auto', stacked: true, reverse: false }}\n        yFormat=\" >-.2f\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'transportation',\n            legendOffset: 36,\n            legendPosition: 'middle'\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n            </div>\n        )\n    }\n}\n\nexport default Chart\n","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\n//import config from './config'\nimport './chart.css'\nimport { getCodeCitations } from '../Config'\nimport {\n    useParams\n} from \"react-router-dom\";\n\nfunction SingleChart() {\n    let codeName = decodeURIComponent( useParams()['code']);\n    const data = getCodeCitations(codeName) ;\n\n    const ratio = data.slice(-1)[0]['y'] / data[0]['y'];\n    const annualGrowth = (Math.pow(ratio, 1.0/data.length) - 1) * 100;\n\n    return (\n        <div className=\"container\">\n            <h2 id=\"title\" >\n                {codeName} { annualGrowth.toFixed(1) + '% annual growth'}\n            </h2>\n            <div className=\"chart\">\n\n                <ResponsiveLine\n                    title={codeName}\n                    data={[{ 'id': codeName, 'data': getCodeCitations(codeName) }]}\n                    margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                    xScale={{ type: 'point' }}\n                    yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                    yFormat=\" >-.2f\"\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        orient: 'bottom',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Year',\n                        legendOffset: 36,\n                        legendPosition: 'middle'\n                    }}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Citations (Google Scholar)',\n                        legendOffset: -50,\n                        legendPosition: 'middle'\n                    }}\n                    pointSize={10}\n                    pointColor={{ theme: 'background' }}\n                    pointBorderWidth={2}\n                    pointBorderColor={{ from: 'serieColor' }}\n                    pointLabelYOffset={-12}\n                    enableCrosshair={false}\n                    useMesh={true}\n                    legends={[\n                        {\n                            anchor: 'bottom-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 100,\n                            translateY: 0,\n                            itemsSpacing: 0,\n                            itemDirection: 'left-to-right',\n                            itemWidth: 80,\n                            itemHeight: 20,\n                            itemOpacity: 0.75,\n                            symbolSize: 12,\n                            symbolShape: 'circle',\n                            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemBackground: 'rgba(0, 0, 0, .03)',\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                    animate={false}\n                />\n            </div>\n        </div>\n    )\n\n}\n\nexport default SingleChart;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport './index.css';\n//import './App.css';\nimport Table from './components/Table';\nimport Chart from './components/Chart/chart';\nimport SingleChart from './components/Chart/single';\nimport Typography from '@material-ui/core/Typography';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename='/'>\n    <div>  \n        <main>\n          <Route exact path=\"/\" component={Table}/>\n          <Route exact path=\"/chart\" component={Chart} />\n          <Route exact path=\"/charts/:code\" component={SingleChart} />\n        </main>\n  \n        <footer>\n          <Typography>(c) 2021 Leopold Talirz</Typography>\n        </footer>\n      </div>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n/* <header>\nAtomistic Simulation Engines\n</header> */\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}