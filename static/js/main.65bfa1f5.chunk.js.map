{"version":3,"sources":["reportWebVitals.js","components/Dashboard/listItems.js","components/Dashboard/Styles.js","components/Config.js","components/Columns.js","components/Table.js","components/Dashboard/Title.js","components/About.js","components/Chart/single.js","components/Statistics.js","Dashboard.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","mainListItems","ListItem","button","component","href","ListItemIcon","ListItemText","primary","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","yearToRange","year","toString","YEARS","citation","citations","push","parseInt","split","Set","sort","CODES","codename","codes","getData","range_key","citations_data","data","dataArray","Object","assign","filterCodeNames","filters","codeNames","codeName","filter","includes","getCodeCitations","line_data","isNaN","TooltipText","tooltip","text","Tooltip","placement","style","Table","props","state","columns","options","event","this","setState","target","value","className","defaultValue","onChange","handleYearChange","map","x","dataIndex","row","rel","methods","licenses","color","searchUrl","encodeURIComponent","Button","React","Component","Title","Typography","variant","gutterBottom","children","Home","classes","Grid","item","xs","Paper","Fragment","source","SingleChart","decodeURIComponent","useParams","ratio","slice","Math","pow","length","toFixed","nivoChart","id","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","enableCrosshair","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","animate","costGraph","groups","lines","group","sourceGraph","chartLink","totalList","line","absoluteGrowthList","relativeGrowthList","Card","message","footnote","size","depositContext","CURRENT_YEAR","GROWTH","dataNew","dataOld","delta","forEach","dNew","index","factor","parseFloat","a","b","citationGrowth","entries","k","v","Copyright","align","Link","Date","getFullYear","Dashboard","useState","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","edge","aria-label","onClick","noWrap","Drawer","Divider","List","Container","maxWidth","basename","exact","path","About","Statistics","Box","pt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65bfa1f5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InfoIcon from '@material-ui/icons/Info';\n// import HomeIcon from '@material-ui/icons/Home';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport TableChartIcon from '@material-ui/icons/TableChart';\n\nexport const mainListItems = (\n  <div>\n{/* {      <ListItem button component={\"a\"} href={'#/'}>\n      <ListItemIcon>\n        <HomeIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Home\" />\n    </ListItem>} */}\n    <ListItem button component={\"a\"} href={'#/table'}>\n      <ListItemIcon>\n        <TableChartIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Table\" />\n    </ListItem>\n    <ListItem button component={\"a\"} href={'#/stats'}>\n      <ListItemIcon>\n        <EqualizerIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Statistics\" />\n    </ListItem>\n    <ListItem button component={\"a\"} href={'#/about'}>\n      <ListItemIcon>\n        <InfoIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"About\" />\n    </ListItem>\n  </div>\n);\n\n// export const secondaryListItems = (\n//   <div>\n//     <ListSubheader inset>Saved reports</ListSubheader>\n//     <ListItem button>\n//       <ListItemIcon>\n//         <AssignmentIcon />\n//       </ListItemIcon>\n//       <ListItemText primary=\"Current month\" />\n//     </ListItem>\n//     <ListItem button>\n//       <ListItemIcon>\n//         <AssignmentIcon />\n//       </ListItemIcon>\n//       <ListItemText primary=\"Last quarter\" />\n//     </ListItem>\n//     <ListItem button>\n//       <ListItemIcon>\n//         <AssignmentIcon />\n//       </ListItemIcon>\n//       <ListItemText primary=\"Year-end sale\" />\n//     </ListItem>\n//   </div>\n// );\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    toolbar: {\n      paddingRight: 24, // keep right padding when drawer closed\n    },\n    toolbarIcon: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'flex-end',\n      padding: '0 8px',\n      ...theme.mixins.toolbar,\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      marginLeft: drawerWidth,\n      width: `calc(100% - ${drawerWidth}px)`,\n      transition: theme.transitions.create(['width', 'margin'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: 36,\n    },\n    menuButtonHidden: {\n      display: 'none',\n    },\n    title: {\n      flexGrow: 1,\n    },\n    drawerPaper: {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      width: drawerWidth,\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    drawerPaperClose: {\n      overflowX: 'hidden',\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      width: theme.spacing(7),\n      [theme.breakpoints.up('sm')]: {\n        width: theme.spacing(9),\n      },\n    },\n    appBarSpacer: theme.mixins.toolbar,\n    content: {\n      flexGrow: 1,\n      height: '100vh',\n      overflow: 'auto',\n    },\n    container: {\n      paddingTop: theme.spacing(4),\n      paddingBottom: theme.spacing(4),\n    },\n    paper: {\n      padding: theme.spacing(2),\n      display: 'flex',\n      overflow: 'auto',\n      flexDirection: 'column',\n    },\n    fixedHeight: {\n      height: 240,\n    },\n  }));\n\n  export default useStyles;","import citations from '../data/citations.json'\nimport codes from '../data/codes.json'\n\nfunction yearToRange(year) {\n  /**\n   * Transform year to year range used in citations.json\n   * \n   * E.g. 2020 => \"2020-2020\"\n   */\n  return year.toString() + '-' + year.toString();\n}\n\nfunction rangeToYear(range) {\n  /**\n   * Transform year range used in citations.json to year\n   * \n   * E.g. \"2020-2020\" => 2020\n   */\n  return parseInt(range.split('-')[0]);\n}\n\n// For whatever reason, one cannot simply use `citations.keys()`\nlet YEARS = [];\nfor (const citation in citations){\n  YEARS.push(rangeToYear(citation));\n}\nYEARS = [...new Set(YEARS)];\nYEARS.sort();\n\n\nlet CODES = [];\nfor (const codename in codes){\n    CODES.push(codename);\n}\n\nfunction getData(year) {\n  /**\n   * Get data for code table for a given year.\n   */\n  let range_key = yearToRange(year);\n  let citations_data = citations[range_key]['citations'];\n  let data = codes; //.slice();\n\n  for (const codename in data) {\n    data[codename]['citations'] = citations_data[codename]['citations'];\n  }\n\n  let dataArray = [];\n  for (const codename in data) {\n    dataArray.push(Object.assign({}, data[codename]));\n  }\n  return dataArray;\n}\n\nfunction getDataChart(){\n  /**\n   * Get citation data for all codes\n   */\n    let lines = [];\n    for(const codeName of CODES.slice(0,50)){\n        lines.push({ 'id': codeName, 'data': getCodeCitations(codeName)});\n    }\n    return lines;\n}\n\nfunction filterCodeNames(filters){\n  /**\n   * Return list of code names after applying filters.\n   * \n   * E.g. filters = {'type': ['DFT']}\n   */\n    let codeNames = [];\n    for(const codeName in codes){\n      for (const filter in filters) {\n        if (filters[filter].includes(codes[codeName][filter])){\n          codeNames.push(codeName);\n        }\n      }\n    }\n    return codeNames;\n}\n\nfunction  getCodeCitations(codeNames){\n  /** \n   * Return citations of requested codes vs years.\n   * \n   * Sums citations of all codes in codeNames.\n   */\n  let line_data = [];\n    for (const year of YEARS) {\n        let data = {};\n        let range_key = yearToRange(year);\n\n        data['x'] = parseInt(year);\n        data['y'] = 0;\n        for (const codeName of codeNames) {\n          data['y'] += parseInt(citations[range_key]['citations'][codeName]['citations']);\n        }\n        if (isNaN(data['y']) || data['y'] <= 0) { \n            data['y']=0;\n        }\n        line_data.push(data);\n    \n    }\n    return line_data;\n}\n\nexport {yearToRange, rangeToYear, YEARS, CODES, getData, getDataChart, getCodeCitations, filterCodeNames};","/**\n * Column definition for table\n */\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport methods from '../data/methods';\nimport licenses from '../data/licenses';\n//idea: use search icon for link to google scholar\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\n\nimport MoneyOffIcon from '@material-ui/icons/MoneyOff';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport SchoolIcon from '@material-ui/icons/School';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\n//import NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport ContactMailIcon from '@material-ui/icons/ContactMail';\n//import CopyrightIcon from '@material-ui/icons/Copyright';\nimport LockIcon from '@material-ui/icons/Lock';\nimport NoEncryptionIcon from '@material-ui/icons/NoEncryption';\n\nfunction TooltipText(tooltip, text) {\n    /** \n     * Tooltip with nicely spaced text that doesn't become a cursor.\n     */\n    return <Tooltip title={tooltip} placement=\"top-end\" key={text}><span style={{ 'cursor': 'default', 'marginRight': '0.5em' }}>{text}</span></Tooltip>;\n    //return <Tooltip title={tooltip} placement=\"top-end\" key={text} clickable={true}><span><Button disabled >{text}</Button></span></Tooltip>;\n    //return <Tooltip title={tooltip} placement=\"top-end\" key={text} clickable={true}><span><Paper  >{text}</Paper></span></Tooltip>;\n}\n\nfunction getColumns(data, year) {\n    /**\n     * Prepare columns.\n     * \n     * Since 'customBodyRenderLite' function requires us to fetch the data ourselves, this getColumns function\n     * relies on data to already be present (which is rather bad design).\n     */\n    let columns = [\n        {\n            \"name\": \"name\",\n            \"label\": \"Code\",\n            \"options\": {\n                \"filter\": false, \"sort\": true,\n                // add homepage link to code\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    return <a href={row['homepage']} target='_blank' rel=\"noreferrer\">{row['name']}</a>;\n                }\n            }\n        },\n        {\n            \"name\": \"author_name\",\n            \"label\": \"Authors\",\n            \"options\": { \"filter\": false, \"sort\": true, 'selected': false, \"display\": false}\n        },\n        {\n            \"name\": \"types\",\n            \"label\": \"Methods\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const types = data[dataIndex]['types'];\n                    return types.map(x => TooltipText(methods[x], x));\n                }\n            }\n        },\n\n        {\n            \"name\": \"description\",\n            \"label\": \"Notes\",\n            \"options\": { \"filter\": false, \"sort\": true }\n        },\n        {\n            \"name\": \"license\",\n            \"label\": \"Cost\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const x = data[dataIndex]['license'];\n                    if (['C', 'C(S)', 'C(C)'].includes(x)) {\n                        return TooltipText(licenses[x], [<AttachMoneyIcon />]);\n                    } else if (['F(A)'].includes(x)) {\n                        return TooltipText(licenses[x], [<span><MoneyOffIcon /><SchoolIcon /></span>]);\n                    } else if (['I'].includes(x)) {\n                        return TooltipText(licenses[x], [<ContactMailIcon />]);\n                    } else {\n                        return TooltipText(licenses[x], [<MoneyOffIcon />]);\n                    }\n                    //return TooltipText(licenses[x], x);  import ContactMailIcon from '@material-ui/icons/ContactMail';\n                }\n            }\n        },\n        {\n            \"name\": \"license\",\n            \"label\": \"Source\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const x = data[dataIndex]['license'];\n                    if (['C', 'C(S)', 'F(A)'].includes(x)) {\n                        return TooltipText(licenses[x], [<LockOpenIcon color={'action'} />]);\n                    } else if (['C(C)'].includes(x)) {\n                        return TooltipText(licenses[x], [<LockIcon color={'action'} />]);        \n                    } else if (['OS(P)', 'OS(CL)'].includes(x)) {\n                        return TooltipText(licenses[x], [<NoEncryptionIcon color={'action'} />]);\n                    } else if (['F'].includes(x)) {\n                        return TooltipText(licenses[x], [<span><NoEncryptionIcon color={'action'} /></span>]);\n                    } else {\n                        return TooltipText(licenses[x], x);\n                    }\n                }\n            }\n        },\n\n\n        {\n            \"name\": \"citations\",\n            \"label\": \"Citations\",\n            \"options\": {\n                \"filter\": false,\n                \"sort\": true,\n                // add google scholar link to number of citations\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    let searchUrl = '';\n\n                    if (row['query_method'] === 'publication') {\n                        searchUrl = 'https://scholar.google.com/scholar?cites=' + row['query_publication_id'].toString();\n                    } else {\n                        searchUrl = 'https://scholar.google.com/scholar?q=' + encodeURIComponent(row['query_string']);\n                    }\n                    searchUrl += '&hl=en&as_sdt=0%2C5&as_ylo=' + year + '&as_yhi=' + year;\n                    return (<a href={searchUrl} target='_blank' rel=\"noreferrer\">{row['citations']}</a>);\n                }\n            }\n        },\n        {\n            \"name\": \"trend\",\n            \"label\": \"Trend\",\n            \"options\": {\n                \"filter\": false,\n                \"sort\": true,\n                // add google scholar link to number of citations\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    return <Button href={'#/charts/' + encodeURIComponent(row['name'])} color=\"secondary\" ><ShowChartIcon /> </Button>;\n                }\n            }\n        }\n    ]\n\n    return columns;\n}\n\nexport { getColumns }","/**\n * Overview table with all codes.\n */\nimport React from 'react';\nimport MUIDataTable from \"mui-datatables\";\n//import RangeSlider from './RangeSlider'\n\n\nimport { YEARS, getData } from './Config';\nimport { getColumns } from './Columns';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: \"2020\",\n      data: getData(\"2020\"),\n      columns: null,\n      options: {\n        'filterType': 'checkbox',\n        'sortOrder': { 'name': 'citations', 'direction': 'desc' },\n        'rowsPerPage': 100,\n      }\n    };\n  }\n\n  handleYearChange(event) {\n    this.setState({ year: event.target.value, data: getData(event.target.value) });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MUIDataTable\n            title={\n              <h2>Citation Data &nbsp;\n              <select defaultValue={this.state.year} onChange={(event) => this.handleYearChange(event)}>\n                  {YEARS.map(x => <option key={x}>{x}</option>)}\n                </select>\n              </h2>\n            }\n            columns={getColumns(this.state.data, this.state.year)}\n            data={this.state.data}\n            options={this.state.options}\n          />\n        </header>\n      </div>\n    );\n    //title={<RangeSlider year={this.state.year} />\n  }\n}\n\nexport default Table;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Title(props) {\n  return (\n    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\n      {props.children}\n    </Typography>\n  );\n}\n\nTitle.propTypes = {\n  children: PropTypes.node,\n};\n","// import Chart from './Dashboard/Chart';\n// import Deposits from './Dashboard/Deposits';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport ReactMarkdown from 'react-markdown';\n\nimport useStyles from './Dashboard/Styles';\nimport Title from './Dashboard/Title';\n\n\nconst aboutMD = `\n*atsim-trends* aims to track the citation trends of all major atomistic simulation engines (see [scope](https://github.com/ltalirz/atsim-trends#scope)).\n\nThis is a collaboratively edited list.\nPlease visit the [source code repository on GitHub](https://github.com/ltalirz/atsim-trends) for instructions on how to [add new simulation engines](https://github.com/ltalirz/atsim-trends/issues/21).\n\n`;\n\nconst methodologyMD = `\n\n**Disclaimer**: Owing to the [lack of standardization in today's software citation practices](http://doi.org/10.5281/zenodo.4263762), the citation counts reported here are *approximate* and their significance should not be overrated.\nThis is not an exact science.\nNevertheless, [reports](https://github.com/ltalirz/atsim-trends/issues) of mistakes or practical suggestions on how to improve accuracy are always welcome. \n\nApproximate citation counts are obtained from [Google Scholar](https://scholar.google.com/) as follows:\n\n 1. Search for name of the code and the last name of a representative developer (vast majority of codes)\n 1. When the name of the code is too common a search term, citations of a major article are counted (minority of codes)\n\nClick on a citation count in order to see the exact Google Scholar query that was used to extract it.\n`;\n\n\nconst faqMD = `\n *  **Q**: The citation count for year XXXX reported here differs somewhat from the same citation count I see on Google Scholar. Why?\n\n    **A**: Citation counts reported by Google Scholar are not static, even for years that lie in the past.\n    Reasons may include new sites being indexed, more text being extracted, different citations being disambiguated, or even the heuristic evolving that predicts the total number of results.\n    In our experience, citation data for the previous year can be subject to significant (upwards) fluctuation, while citation data for years further in the past are quite stable.\n    We record the date of when each data point was collected in the [source code repository](https://github.com/ltalirz/atsim-trends).\n\n    \n`;\n\nconst acknowledgementsMD = `\nThis project was inspired by and built upon the [\"Major codes in electronic-structure theory, quantum chemistry, and molecular-dynamics\"](https://www.nomad-coe.eu/old-pages/externals/codes) collection maintained by the [NOMAD Center of Excellence](https://www.nomad-coe.eu) from 2017-2019.\nThanks go to Luca Ghiringelli for being supportive of this effort to transform the static list into an interactive app and a collaborative project.\n\nThe project draws upon further great resources, including:\n * The [Google Scholar](https://scholar.google.com/) search engine for citation counts\n * Wikipedia's [List of quantum chemistry and solid-state physics software](https://en.wikipedia.org/wiki/List_of_quantum_chemistry_and_solid-state_physics_software)\n * Wikipedia's [Comparison of software for molecular mechanics modelling](https://en.wikipedia.org/wiki/Comparison_of_software_for_molecular_mechanics_modeling)\n * SklogWiki's [Materials modelling and computer simulation codes](https://en.wikipedia.org/wiki/Comparison_of_software_for_molecular_mechanics_modeling)\n`;\n\n\nconst contactMD = `\nThis page is currently maintained by [Leopold Talirz](https://sites.google.com/site/leotalirz/).\n`;\n\nexport default function Home() {\n    const classes = useStyles();\n    return (\n        <Grid container spacing={3}>\n            {}\n            {/* About */}\n            <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                    <React.Fragment>\n                        <Title>About</Title>\n                        <Typography component=\"div\" variant=\"body1\">\n                            <ReactMarkdown source={aboutMD} />\n                        </Typography>\n                    </React.Fragment>\n                </Paper>\n            </Grid>\n            {/* Methodology */}\n                        <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                    <React.Fragment>\n                        <Title>Methodology</Title>\n                        <Typography component=\"div\" variant=\"body1\">\n                            <ReactMarkdown source={methodologyMD} />\n                        </Typography>\n                    </React.Fragment>\n                </Paper>\n            </Grid>\n            {/* FAQ */}\n                        <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                    <React.Fragment>\n                        <Title>Frequently Asked Questions</Title>\n                        <Typography component=\"div\" variant=\"body1\">\n                            <ReactMarkdown source={faqMD} />\n                        </Typography>\n                    </React.Fragment>\n                </Paper>\n            </Grid>\n            {/* Acknowledgements */}\n            <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                    <React.Fragment>\n                        <Title>Acknowledgements</Title>\n                        <Typography component=\"div\" variant=\"body1\">\n                            <ReactMarkdown source={acknowledgementsMD} />\n                        </Typography>\n                    </React.Fragment>\n                </Paper>\n            </Grid>\n            {/* Contact */}\n            <Grid item xs={12}>\n                <Paper className={classes.paper}>\n                    <React.Fragment>\n                        <Title>Contact</Title>\n                        <Typography component=\"div\" variant=\"body1\">\n                            <ReactMarkdown source={contactMD} />\n                        </Typography>\n                    </React.Fragment>\n                </Paper>\n            </Grid>\n        </Grid>);\n}\n\n// {/* Chart */}\n// <Grid item xs={12} md={8} lg={9}>\n//     <Paper className={fixedHeightPaper}>\n//         <Chart />\n//     </Paper>\n// </Grid>\n// {/* Recent Deposits */}\n// <Grid item xs={12} md={4} lg={3}>\n//     <Paper className={fixedHeightPaper}>\n//         <Deposits />\n//     </Paper>\n// </Grid>","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\n//import config from './config'\nimport './chart.css'\nimport { getCodeCitations } from '../Config'\nimport {\n    useParams\n} from \"react-router-dom\";\n\n\nfunction SingleChart() {\n    /**\n     * Return chart for single code.\n     * \n     * Name of code is parsed from URI.\n     */\n    let codeName = decodeURIComponent( useParams()['code']);\n    const citations = getCodeCitations([codeName]);\n\n    const ratio = citations.slice(-1)[0]['y'] / citations[0]['y'];\n    const annualGrowth = (Math.pow(ratio, 1.0/citations.length) - 1) * 100;\n    const title = codeName + \" \" + annualGrowth.toFixed(1) + '% annual growth';\n\n    return nivoChart([{ 'id': codeName, 'data': getCodeCitations([codeName]) }], title);\n}\n\nfunction nivoChart(data, title) {\n    /**\n     * Return nivo line-chart with default formatting for given data and title.\n     */\n\n    return (\n        <div className=\"container\">\n            <h2 id=\"title\" >{title}</h2>\n            <div className=\"chart\">\n                <ResponsiveLine\n                    title={title}\n                    data={data}\n                    margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n                    xScale={{ type: 'point' }}\n                    yScale={{ type: 'linear', min: 0, max: 'auto', stacked: false, reverse: false }}\n                    yFormat=\" >-.2f\"\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        orient: 'bottom',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Year',\n                        legendOffset: 36,\n                        legendPosition: 'middle'\n                    }}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Citations (Google Scholar)',\n                        legendOffset: -50,\n                        legendPosition: 'middle'\n                    }}\n                    pointSize={10}\n                    pointColor={{ theme: 'background' }}\n                    pointBorderWidth={2}\n                    pointBorderColor={{ from: 'serieColor' }}\n                    pointLabelYOffset={-12}\n                    enableCrosshair={false}\n                    useMesh={true}\n                    legends={[\n                        {\n                            anchor: 'bottom-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 100,\n                            translateY: 0,\n                            itemsSpacing: 0,\n                            itemDirection: 'left-to-right',\n                            itemWidth: 80,\n                            itemHeight: 20,\n                            itemOpacity: 0.75,\n                            symbolSize: 12,\n                            symbolShape: 'circle',\n                            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemBackground: 'rgba(0, 0, 0, .03)',\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                    animate={false}\n                />\n            </div>\n        </div>\n    )\n\n}\n\nexport {SingleChart, nivoChart};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\n\nimport useStyles from './Dashboard/Styles';\nimport Title from './Dashboard/Title';\nimport { YEARS, getData, filterCodeNames, getCodeCitations } from './Config';\nimport {nivoChart} from './Chart/single';\n// import { Card } from '@material-ui/core';\n\nfunction citationGrowth(year) {\n    /**\n     * Compute citation growth for given year with respect to previous one.\n     */\n\n    const dataNew = getData(year);\n    const dataOld = getData(year - 1);\n\n    let data = { 'total': [], 'absoluteGrowth': [], 'relativeGrowth': [] , 'typeCounts': [] };\n    let delta = 0;\n    let codeName = '';\n\n    dataNew.forEach((dNew, index) => {\n        codeName = dNew['name'];\n        delta = dNew['citations'] - dataOld[index]['citations'];\n        data['absoluteGrowth'].push([codeName, delta]);\n        data['total'].push([codeName, dNew['citations']]);\n\n        if (dataNew[index]['citations'] < 100) {\n            // We require at least 100 citations for analyzing growth\n            data['relativeGrowth'].push([codeName, 0]);\n        } else {\n            const factor = delta / parseFloat(dataOld[index]['citations']);\n            data['relativeGrowth'].push([codeName, factor]);\n        }\n\n        // add code count to \n        for (const type of dNew['types']){\n            if (type in data['typeCounts']) {\n                data['typeCounts'][type] += 1;\n            } else {\n                data['typeCounts'][type] = 1;\n            }\n        }\n    })\n\n    data['absoluteGrowth'].sort((a, b) => {\n        return a[1] - b[1];\n    }).reverse();\n    data['relativeGrowth'].sort((a, b) => {\n        return a[1] - b[1];\n    }).reverse();\n    data['total'].sort((a, b) => {\n        return a[1] - b[1];\n    }).reverse();\n\n    return data;\n\n}\n\nfunction costGraph() {\n    /**\n     * Compute citation growth for given year with respect to previous one.\n     */\n\n    // Careful: it seems the legend coloring does not match the one of the graph automatically\n    let groups = {\n        'Free' : ['F', 'F(A)', 'OS(CL)', 'OS(P)'],\n        'Commercial': ['C', 'C(C)', 'C(S)'],\n    }\n\n    let lines = [];\n    for (const group in groups){\n        const codeNames = filterCodeNames({\"license\": groups[group]});\n        lines.push({ 'id': group, 'data':  getCodeCitations(codeNames)});\n    }\n    return nivoChart(lines, \"\");\n}\n\nfunction sourceGraph() {\n    /**\n     * Compute citation growth for given year with respect to previous one.\n     */\n\n    // Careful: it seems the legend coloring does not match the one of the graph automatically\n    let groups = {\n        'Closed source' : ['C(C)'],\n        'Open-source': ['OS(CL)', 'OS(P)'],\n        'Source available': ['C', 'C(S)', 'F', 'F(A)', 'OS(CL)', 'OS(P)' ]\n    }\n\n    let lines = [];\n    for (const group in groups){\n        const codeNames = filterCodeNames({\"license\": groups[group]});\n        lines.push({ 'id': group, 'data':  getCodeCitations(codeNames)});\n    }\n    return nivoChart(lines, \"\");\n}\n\n\n\nfunction chartLink(codeName) {\n    /**\n     * Return hyperlink to citation chart for given code name.\n     */\n    return <a href={'#/charts/' + encodeURIComponent(codeName)} >{codeName}</a>;\n}\n\nfunction totalList(data) {\n    return (\n        <Typography component=\"div\" variant=\"subtitle1\">\n        <ol>\n            {data.map(line => <li>{chartLink(line[0])}{\": \" + line[1] + \"\\n\"}</li>)}\n        </ol>\n        </Typography>\n    );     \n}\n\nfunction absoluteGrowthList(data) {\n    return (\n        <Typography component=\"div\" variant=\"subtitle1\">\n        <ol>\n            {data.map(line => <li>{chartLink(line[0])}{\": +\" + line[1] + \"\\n\"}</li>)}\n        </ol>\n        </Typography>\n    );     \n}\n\nfunction relativeGrowthList(data) {\n    return (\n        <Typography component=\"div\" variant=\"subtitle1\">\n        <ol>\n            {data.map(line => <li>{chartLink(line[0])}{\": +\" + parseInt(line[1] * 100) + \"%\\n\"}</li>)}\n        </ol>\n        </Typography>\n    );     \n}\n\nfunction typeList(data) {\n    return (\n        <Typography component=\"div\" variant=\"subtitle1\">\n        <ul>\n        {Object.entries(data).map(( [k,v]) => <li>{k + \": \" + v + \"\\n\"}</li>)}\n        </ul>\n        </Typography>\n    );     \n}\n\nfunction Card(title, message, footnote=\"\", size) {\n    const classes = useStyles();\n    return ([\n        <Grid item xs={size}>\n            <Paper className={classes.paper}>\n                <React.Fragment>\n                    <Title>{title}</Title>\n                    {message}\n                    <Typography color=\"textSecondary\" className={classes.depositContext}>\n                        {footnote}\n</Typography>\n                </React.Fragment>\n            </Paper>\n        </Grid>\n\n    ]);\n}\n\nlet CURRENT_YEAR = YEARS.slice(-1)[0];\nlet GROWTH = citationGrowth(CURRENT_YEAR);\n\nexport default function Home() {\n    return (\n        <Grid container spacing={3}>\n            {Card(\"Simulation engines\", typeList(GROWTH['typeCounts']), \"Number of simulation engines per method.\", 4)}\n            {Card(\"Top cited\", totalList(GROWTH['total'].slice(0, 5)), \n            \"In \" + CURRENT_YEAR +\".\", 4)}\n            {Card(\"Top citation growth\", absoluteGrowthList(GROWTH['absoluteGrowth'].slice(0, 5)), \n            \"In \" + CURRENT_YEAR +\" with respect to \"+ (CURRENT_YEAR-1) + \".\", 4)}\n            {Card(\"Top relative citation growth\", relativeGrowthList(GROWTH['relativeGrowth'].slice(0, 5)),\n                \"In \" + CURRENT_YEAR +\" with respect to \"+ (CURRENT_YEAR-1) + \", considering only codes with >100 citations.\",\n                 4)}\n            {Card(\"Citations commercial vs free\", costGraph(),\"'Free' includes codes that are free for academic use only.\",11)}\n            {Card(\"Citations by source code availability\", sourceGraph(),\"'Source available' includes codes whose source code can be obtained for free or for a fee.\",11)}\n        </Grid>);\n}","import React from 'react';\nimport clsx from 'clsx';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Container from '@material-ui/core/Container';\n\nimport Link from '@material-ui/core/Link';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport { mainListItems } from './components/Dashboard/listItems';\n\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport useStyles from './components/Dashboard/Styles';\nimport Table from './components/Table';\nimport About from './components/About';\nimport Statistics from './components/Statistics';\nimport {SingleChart} from './components/Chart/single';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        atsim-trends\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nexport default function Dashboard() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\n        <Toolbar className={classes.toolbar}>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\n            Trends in atomistic simulation engines\n          </Typography>\n          {\n            // <IconButton color=\"inherit\">\n            //   <Badge badgeContent={4} color=\"secondary\">\n            //     <NotificationsIcon />\n            //   </Badge>\n            // </IconButton>\n          }\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        variant=\"permanent\"\n        classes={{\n          paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\n        }}\n        open={open}\n      >\n        <div className={classes.toolbarIcon}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronLeftIcon />\n          </IconButton>\n        </div>\n        <Divider />\n        <List>{mainListItems}</List>\n        {/* {<Divider />\n        <List>{secondaryListItems}</List>} */}\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.appBarSpacer} />\n        <Container maxWidth=\"lg\" className={classes.container}>\n          <Router basename='/'>\n            {/* { <Container maxWidth={'lg'} style={{'textAlign': 'center'}}>} */}\n            <Route exact path=\"/\" component={Table} />\n            <Route exact path=\"/table\" component={Table} />\n            <Route exact path=\"/charts/:code\" component={SingleChart} />\n            <Route exact path=\"/about\" component={About} />\n            <Route exact path=\"/stats\" component={Statistics} />\n            {/* { </Container>} */}\n          </Router>\n          <Box pt={4}>\n            <Copyright />\n          </Box>\n        </Container>\n      </main>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport Dashboard from './Dashboard';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}