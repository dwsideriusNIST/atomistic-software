{"version":3,"sources":["reportWebVitals.js","components/Config.js","components/Columns.js","components/Table.js","components/Chart/chart.js","components/Chart/single.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","yearToRange","year","toString","YEARS","citation","citations","push","parseInt","split","Set","sort","CODES","codename","codes","getData","range_key","citations_data","data","dataArray","getDataChart","lines","slice","codeName","getCodeCitations","line_data","isNaN","TooltipText","tooltip","text","Tooltip","title","placement","style","Table","props","state","columns","options","event","this","setState","target","value","className","defaultValue","onChange","handleYearChange","map","x","dataIndex","row","href","rel","methods","includes","licenses","color","searchUrl","encodeURIComponent","Button","React","Component","Chart","margin","top","right","bottom","left","xScale","type","yScale","min","max","stacked","reverse","yFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","SingleChart","decodeURIComponent","useParams","ratio","annualGrowth","Math","pow","length","id","toFixed","enableCrosshair","animate","ReactDOM","render","StrictMode","basename","Container","maxWidth","exact","path","component","Typography","document","getElementById"],"mappings":"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","file":"static/js/main.c51c1d63.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import citations from '../data/citations.json'\nimport codes from '../data/codes.json'\n\nfunction yearToRange(year) {\n  return year.toString() + '-' + year.toString();\n}\n\nfunction rangeToYear(range) {\n  return parseInt(range.split('-')[0]);\n}\n\n// For whatever reason, one cannot simply use `citations.keys()`\nlet YEARS = [];\nfor (const citation in citations){\n  YEARS.push(rangeToYear(citation));\n}\nYEARS = [...new Set(YEARS)];\nYEARS.sort();\n\n\nlet CODES = [];\nfor (const codename in codes){\n    CODES.push(codename);\n}\n\nfunction getData(year) {\n  let range_key = yearToRange(year);\n  let citations_data = citations[range_key]['citations'];\n  let data = codes; //.slice();\n\n  for (const codename in data) {\n    data[codename]['citations'] = citations_data[codename]['citations'];\n  }\n\n  let dataArray = [];\n  for (const codename in data) {\n    dataArray.push(data[codename]);\n  }\n  return dataArray;\n}\n\nfunction getDataChart(){\n    let lines = [];\n    for(const codeName of CODES.slice(0,50)){\n        lines.push({ 'id': codeName, 'data': getCodeCitations(codeName)});\n    }\n    return lines;\n}\n\nfunction  getCodeCitations(codeName){\n  let line_data = [];\n    for (const year of YEARS) {\n        let data = {};\n        let range_key = yearToRange(year);\n\n        data['x'] = parseInt(year);\n        data['y'] = parseInt(citations[range_key]['citations'][codeName]['citations']);\n        if (isNaN(data['y']) || data['y'] <= 0) { \n            data['y']=0.1;\n        }\n        line_data.push(data);\n    \n    }\n    return line_data;\n}\n\nexport {yearToRange, rangeToYear, YEARS, getData, getDataChart, getCodeCitations};","/**\n * Column definition for table\n */\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport methods from '../data/methods';\nimport licenses from '../data/licenses';\n//idea: use search icon for link to google scholar\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\n\nimport MoneyOffIcon from '@material-ui/icons/MoneyOff';\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport SchoolIcon from '@material-ui/icons/School';\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\n\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\nimport ContactMailIcon from '@material-ui/icons/ContactMail';\nimport CopyrightIcon from '@material-ui/icons/Copyright';\n\nfunction TooltipText(tooltip, text) {\n    /** \n     * Tooltip with nicely spaced text that doesn't become a cursor.\n     */\n    return <Tooltip title={tooltip} placement=\"top-end\" key={text}><span style={{ 'cursor': 'default', 'marginRight': '0.5em' }}>{text}</span></Tooltip>;\n    //return <Tooltip title={tooltip} placement=\"top-end\" key={text} clickable={true}><span><Button disabled >{text}</Button></span></Tooltip>;\n    //return <Tooltip title={tooltip} placement=\"top-end\" key={text} clickable={true}><span><Paper  >{text}</Paper></span></Tooltip>;\n}\n\nfunction getColumns(data, year) {\n    /**\n     * Prepare columns.\n     * \n     * Since 'customBodyRenderLite' function requires us to fetch the data ourselves, this getColumns function\n     * relies on data to already be present (which is rather bad design).\n     */\n    let columns = [\n        {\n            \"name\": \"name\",\n            \"label\": \"Code\",\n            \"options\": {\n                \"filter\": false, \"sort\": true,\n                // add homepage link to code\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    return <a href={row['homepage']} target='_blank' rel=\"noreferrer\">{row['name']}</a>;\n                }\n            }\n        },\n        {\n            \"name\": \"author_name\",\n            \"label\": \"Authors\",\n            \"options\": { \"filter\": false, \"sort\": true, 'selected': false }\n        },\n        {\n            \"name\": \"types\",\n            \"label\": \"Methods\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const types = data[dataIndex]['types'];\n                    return types.map(x => TooltipText(methods[x], x));\n                }\n            }\n        },\n\n        {\n            \"name\": \"description\",\n            \"label\": \"Notes\",\n            \"options\": { \"filter\": false, \"sort\": true }\n        },\n        {\n            \"name\": \"license\",\n            \"label\": \"Cost\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const x = data[dataIndex]['license'];\n                    if (['C', 'C(S)', 'C(C)'].includes(x)) {\n                        return TooltipText(licenses[x], [<AttachMoneyIcon />]);\n                    } else if (['F(A)'].includes(x)) {\n                        return TooltipText(licenses[x], [<span><MoneyOffIcon /><SchoolIcon /></span>]);\n                    } else if (['I'].includes(x)) {\n                        return TooltipText(licenses[x], [<ContactMailIcon />]);\n                    } else {\n                        return TooltipText(licenses[x], [<MoneyOffIcon />]);\n                    }\n                    //return TooltipText(licenses[x], x);  import ContactMailIcon from '@material-ui/icons/ContactMail';\n                }\n            }\n        },\n        {\n            \"name\": \"license\",\n            \"label\": \"Source\",\n            \"options\": {\n                \"filter\": true,\n                \"sort\": true,\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const x = data[dataIndex]['license'];\n                    if (['C', 'C(S)', 'F(A)'].includes(x)) {\n                        return TooltipText(licenses[x], [<CopyrightIcon />]);\n                    } else if (['C(C)'].includes(x)) {\n                        return TooltipText(licenses[x], [<NotInterestedIcon />]);        \n                    } else if (['OS(P)', 'OS(CL)'].includes(x)) {\n                        return TooltipText(licenses[x], [<LockOpenIcon color={'action'} />]);\n                    } else if (['F'].includes(x)) {\n                        return TooltipText(licenses[x], [<span><CopyrightIcon /></span>]);\n                    } else {\n                        return TooltipText(licenses[x], x);\n                    }\n                }\n            }\n        },\n\n\n        {\n            \"name\": \"citations\",\n            \"label\": \"Citations\",\n            \"options\": {\n                \"filter\": false,\n                \"sort\": true,\n                // add google scholar link to number of citations\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    const searchUrl = 'https://scholar.google.com/scholar?q=' + encodeURIComponent(row['query_string'])\n                        + '&hl=en&as_sdt=0%2C5&as_ylo=' + year + '&as_yhi=' + year;\n                    return (<a href={searchUrl} target='_blank' rel=\"noreferrer\">{row['citations']}</a>);\n                }\n            }\n        },\n        {\n            \"name\": \"trend\",\n            \"label\": \"Trend\",\n            \"options\": {\n                \"filter\": false,\n                \"sort\": true,\n                // add google scholar link to number of citations\n                \"customBodyRenderLite\": (dataIndex) => {\n                    const row = data[dataIndex];\n                    return <Button href={'#/charts/' + encodeURIComponent(row['name'])} ><ShowChartIcon /> </Button>;\n                }\n            }\n        }\n    ]\n\n    return columns;\n}\n\nexport { getColumns }","/**\n * Overview table with all codes.\n */\nimport React from 'react';\nimport MUIDataTable from \"mui-datatables\";\n//import RangeSlider from './RangeSlider'\n\n\nimport { YEARS, getData } from './Config';\nimport { getColumns } from './Columns';\n\nclass Table extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      year: \"2020\",\n      data: getData(\"2020\"),\n      columns: null,\n      options: {\n        'filterType': 'checkbox',\n        'sortOrder': { 'name': 'citations', 'direction': 'desc' },\n        'rowsPerPage': 100,\n      }\n    };\n  }\n\n  handleYearChange(event) {\n    this.setState({ year: event.target.value, data: getData(event.target.value) });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MUIDataTable\n            title={\n              <h2>Atomistic Simulation Engines &nbsp;\n              <select defaultValue={this.state.year} onChange={(event) => this.handleYearChange(event)}>\n                  {YEARS.map(x => <option key={x}>{x}</option>)}\n                </select>\n              </h2>\n            }\n            columns={getColumns(this.state.data, this.state.year)}\n            data={this.state.data}\n            options={this.state.options}\n          />\n        </header>\n      </div>\n    );\n    //title={<RangeSlider year={this.state.year} />\n  }\n}\n\nexport default Table;\n","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\n//import config from './config'\n//import './chart.css'\nimport {getDataChart} from '../Config'\n\nclass Chart extends React.Component {\n\n    render() {\n        return (\n            <div className=\"chart\">\n                <ResponsiveLine\n        data={getDataChart()}\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n        xScale={{ type: 'point' }}\n        yScale={{ type: 'log', min: 100, max: 'auto', stacked: true, reverse: false }}\n        yFormat=\" >-.2f\"\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n            orient: 'bottom',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'transportation',\n            legendOffset: 36,\n            legendPosition: 'middle'\n        }}\n        axisLeft={{\n            orient: 'left',\n            tickSize: 5,\n            tickPadding: 5,\n            tickRotation: 0,\n            legend: 'count',\n            legendOffset: -40,\n            legendPosition: 'middle'\n        }}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n            {\n                anchor: 'bottom-right',\n                direction: 'column',\n                justify: false,\n                translateX: 100,\n                translateY: 0,\n                itemsSpacing: 0,\n                itemDirection: 'left-to-right',\n                itemWidth: 80,\n                itemHeight: 20,\n                itemOpacity: 0.75,\n                symbolSize: 12,\n                symbolShape: 'circle',\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                effects: [\n                    {\n                        on: 'hover',\n                        style: {\n                            itemBackground: 'rgba(0, 0, 0, .03)',\n                            itemOpacity: 1\n                        }\n                    }\n                ]\n            }\n        ]}\n    />\n            </div>\n        )\n    }\n}\n\nexport default Chart\n","import React from 'react'\nimport { ResponsiveLine } from '@nivo/line'\n\n//import config from './config'\nimport './chart.css'\nimport { getCodeCitations } from '../Config'\nimport {\n    useParams\n} from \"react-router-dom\";\n\nfunction SingleChart() {\n    let codeName = decodeURIComponent( useParams()['code']);\n    const data = getCodeCitations(codeName) ;\n\n    const ratio = data.slice(-1)[0]['y'] / data[0]['y'];\n    const annualGrowth = (Math.pow(ratio, 1.0/data.length) - 1) * 100;\n\n    return (\n        <div className=\"container\">\n            <h2 id=\"title\" >\n                {codeName} { annualGrowth.toFixed(1) + '% annual growth'}\n            </h2>\n            <div className=\"chart\">\n\n                <ResponsiveLine\n                    title={codeName}\n                    data={[{ 'id': codeName, 'data': getCodeCitations(codeName) }]}\n                    margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n                    xScale={{ type: 'point' }}\n                    yScale={{ type: 'linear', min: 0, max: 'auto', stacked: true, reverse: false }}\n                    yFormat=\" >-.2f\"\n                    axisTop={null}\n                    axisRight={null}\n                    axisBottom={{\n                        orient: 'bottom',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Year',\n                        legendOffset: 36,\n                        legendPosition: 'middle'\n                    }}\n                    axisLeft={{\n                        orient: 'left',\n                        tickSize: 5,\n                        tickPadding: 5,\n                        tickRotation: 0,\n                        legend: 'Citations (Google Scholar)',\n                        legendOffset: -50,\n                        legendPosition: 'middle'\n                    }}\n                    pointSize={10}\n                    pointColor={{ theme: 'background' }}\n                    pointBorderWidth={2}\n                    pointBorderColor={{ from: 'serieColor' }}\n                    pointLabelYOffset={-12}\n                    enableCrosshair={false}\n                    useMesh={true}\n                    legends={[\n                        {\n                            anchor: 'bottom-right',\n                            direction: 'column',\n                            justify: false,\n                            translateX: 100,\n                            translateY: 0,\n                            itemsSpacing: 0,\n                            itemDirection: 'left-to-right',\n                            itemWidth: 80,\n                            itemHeight: 20,\n                            itemOpacity: 0.75,\n                            symbolSize: 12,\n                            symbolShape: 'circle',\n                            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n                            effects: [\n                                {\n                                    on: 'hover',\n                                    style: {\n                                        itemBackground: 'rgba(0, 0, 0, .03)',\n                                        itemOpacity: 1\n                                    }\n                                }\n                            ]\n                        }\n                    ]}\n                    animate={false}\n                />\n            </div>\n        </div>\n    )\n\n}\n\nexport default SingleChart;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport './index.css';\n//import './App.css';\nimport Table from './components/Table';\n//import Home from './components/Home';\nimport Chart from './components/Chart/chart';\nimport SingleChart from './components/Chart/single';\nimport Typography from '@material-ui/core/Typography';\n\nimport Container from '@material-ui/core/Container';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename='/'>\n    <Container maxWidth={'lg'} style={{'textAlign': 'center'}}>\n        <main>\n          <Route exact path=\"/\" component={Table}/>\n          <Route exact path=\"/chart\" component={Chart} />\n          <Route exact path=\"/charts/:code\" component={SingleChart} />\n         \n        </main>\n        <footer>\n          <Typography>(c) 2021 Leopold Talirz</Typography>\n        </footer>\n      </Container>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//  <Route exact path=\"/home\" component={Home} /> \n/* <header>\nAtomistic Simulation Engines\n</header> */\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}